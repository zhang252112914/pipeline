$date
	Sat Jun 28 14:28:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pipeline_sccomp_tb $end
$var wire 32 ! reg_data [31:0] $end
$var reg 1 " clk $end
$var reg 5 # reg_sel [4:0] $end
$var reg 1 $ rstn $end
$scope module U_pipeline_sccomp $end
$var wire 1 " clk $end
$var wire 5 % reg_sel [4:0] $end
$var wire 1 & rst $end
$var wire 1 $ rstn $end
$var wire 32 ' reg_data [31:0] $end
$var wire 32 ( instr [31:0] $end
$var wire 32 ) dm_type [31:0] $end
$var wire 32 * dm_dout [31:0] $end
$var wire 32 + dm_din [31:0] $end
$var wire 32 , dm_addr [31:0] $end
$var wire 32 - PC [31:0] $end
$var wire 1 . MemWrite $end
$scope module U_DM $end
$var wire 3 / DMType [2:0] $end
$var wire 1 " clk $end
$var wire 32 0 dout [31:0] $end
$var wire 7 1 word_addr [6:0] $end
$var wire 32 2 din [31:0] $end
$var wire 2 3 byte_offset [1:0] $end
$var wire 32 4 addr [31:0] $end
$var wire 1 . DMWr $end
$var reg 32 5 load_data [31:0] $end
$upscope $end
$scope module U_IM $end
$var wire 7 6 addr [8:2] $end
$var wire 32 7 dout [31:0] $end
$upscope $end
$scope module U_pipeline_CPU $end
$var wire 1 8 BranchTaken $end
$var wire 32 9 Data_in [31:0] $end
$var wire 32 : PC_out [31:0] $end
$var wire 1 ; branch_condition $end
$var wire 1 " clk $end
$var wire 32 < inst_in [31:0] $end
$var wire 1 = is_jump_ID $end
$var wire 1 > jalr_load_hazard_detected $end
$var wire 1 . mem_w $end
$var wire 5 ? reg_sel [4:0] $end
$var wire 1 & reset $end
$var wire 20 @ uimm [19:0] $end
$var wire 1 A stall $end
$var wire 12 B simm [11:0] $end
$var wire 5 C rs2_ID [4:0] $end
$var wire 5 D rs1_ID [4:0] $end
$var wire 32 E reg_data [31:0] $end
$var wire 5 F rd_ID [4:0] $end
$var wire 20 G jimm [19:0] $end
$var wire 32 H imm_ID [31:0] $end
$var wire 5 I iimm_shamt [4:0] $end
$var wire 12 J iimm [11:0] $end
$var wire 1 K forwardMEM $end
$var wire 2 L forwardB_branch [1:0] $end
$var wire 2 M forwardB [1:0] $end
$var wire 2 N forwardA_branch [1:0] $end
$var wire 2 O forwardA [1:0] $end
$var wire 1 P flush_IFID $end
$var wire 1 Q flush_IDEX $end
$var wire 32 R branch_target [31:0] $end
$var wire 12 S bimm [11:0] $end
$var wire 1 T Zero_EX $end
$var wire 2 U WDSel_ID [1:0] $end
$var wire 1 V RegWrite_ID $end
$var wire 32 W RD2_ID [31:0] $end
$var wire 32 X RD1_ID [31:0] $end
$var wire 32 Y PC4_IF [31:0] $end
$var wire 3 Z NPCOp_ID [2:0] $end
$var wire 32 [ NPC [31:0] $end
$var wire 1 \ MemWrite_ID $end
$var wire 1 ] IsJALR_ID $end
$var wire 1 ^ IsBranch_ID $end
$var wire 6 _ EXTOp_ID [5:0] $end
$var wire 32 ` Data_out [31:0] $end
$var wire 3 a DMType_out [2:0] $end
$var wire 3 b DMType_ID [2:0] $end
$var wire 32 c Addr_out [31:0] $end
$var wire 32 d ALU_B [31:0] $end
$var wire 1 e ALUSrc_ID $end
$var wire 32 f ALUOut_EX [31:0] $end
$var wire 5 g ALUOp_ID [4:0] $end
$var reg 32 h ALU_A [31:0] $end
$var reg 32 i ALU_B_forwarded [31:0] $end
$var reg 32 j EXMEM_ALUOut [31:0] $end
$var reg 3 k EXMEM_DMType [2:0] $end
$var reg 1 l EXMEM_MemWrite $end
$var reg 32 m EXMEM_PC4 [31:0] $end
$var reg 32 n EXMEM_RD2 [31:0] $end
$var reg 1 o EXMEM_RegWrite $end
$var reg 2 p EXMEM_WDSel [1:0] $end
$var reg 1 q EXMEM_Zero $end
$var reg 5 r EXMEM_rd [4:0] $end
$var reg 5 s EXMEM_rs2 [4:0] $end
$var reg 1 t EXMEM_valid $end
$var reg 5 u IDEX_ALUOp [4:0] $end
$var reg 1 v IDEX_ALUSrc $end
$var reg 3 w IDEX_DMType [2:0] $end
$var reg 1 x IDEX_MemWrite $end
$var reg 3 y IDEX_NPCOp [2:0] $end
$var reg 32 z IDEX_PC [31:0] $end
$var reg 32 { IDEX_PC4 [31:0] $end
$var reg 32 | IDEX_RD1 [31:0] $end
$var reg 32 } IDEX_RD2 [31:0] $end
$var reg 1 ~ IDEX_RegWrite $end
$var reg 2 !" IDEX_WDSel [1:0] $end
$var reg 32 "" IDEX_imm [31:0] $end
$var reg 5 #" IDEX_rd [4:0] $end
$var reg 5 $" IDEX_rs1 [4:0] $end
$var reg 5 %" IDEX_rs2 [4:0] $end
$var reg 1 &" IDEX_valid $end
$var reg 32 '" IFID_PC [31:0] $end
$var reg 32 (" IFID_PC4 [31:0] $end
$var reg 32 )" IFID_inst [31:0] $end
$var reg 1 *" IFID_valid $end
$var reg 32 +" MEMWB_ALUOut [31:0] $end
$var reg 32 ," MEMWB_MemData [31:0] $end
$var reg 32 -" MEMWB_PC4 [31:0] $end
$var reg 1 ." MEMWB_RegWrite $end
$var reg 2 /" MEMWB_WDSel [1:0] $end
$var reg 5 0" MEMWB_rd [4:0] $end
$var reg 1 1" MEMWB_valid $end
$var reg 32 2" PC_IF [31:0] $end
$var reg 32 3" WriteData_WB [31:0] $end
$var reg 32 4" branch_A [31:0] $end
$var reg 32 5" branch_B [31:0] $end
$var reg 1 6" branch_result $end
$scope module U_EXT $end
$var wire 12 7" bimm [11:0] $end
$var wire 12 8" iimm [11:0] $end
$var wire 5 9" iimm_shamt [4:0] $end
$var wire 20 :" jimm [19:0] $end
$var wire 12 ;" simm [11:0] $end
$var wire 20 <" uimm [19:0] $end
$var wire 6 =" EXTOp [5:0] $end
$var reg 32 >" immout [31:0] $end
$upscope $end
$scope module U_RF $end
$var wire 5 ?" A1 [4:0] $end
$var wire 5 @" A2 [4:0] $end
$var wire 5 A" A3 [4:0] $end
$var wire 1 B" RFWr $end
$var wire 32 C" WD [31:0] $end
$var wire 1 " clk $end
$var wire 1 & rst $end
$var wire 32 D" RD2 [31:0] $end
$var wire 32 E" RD1 [31:0] $end
$var integer 32 F" i [31:0] $end
$upscope $end
$scope module U_alu $end
$var wire 32 G" A [31:0] $end
$var wire 5 H" ALUOp [4:0] $end
$var wire 32 I" B [31:0] $end
$var wire 32 J" PC [31:0] $end
$var wire 1 T Zero $end
$var reg 32 K" C [31:0] $end
$upscope $end
$scope module U_ctrl $end
$var wire 1 e ALUSrc $end
$var wire 3 L" Funct3 [2:0] $end
$var wire 7 M" Funct7 [6:0] $end
$var wire 1 \ MemWrite $end
$var wire 7 N" Op [6:0] $end
$var wire 1 V RegWrite $end
$var wire 1 O" Zero $end
$var wire 1 P" i_add $end
$var wire 1 Q" i_addi $end
$var wire 1 R" i_and $end
$var wire 1 S" i_andi $end
$var wire 1 T" i_auipc $end
$var wire 1 U" i_beq $end
$var wire 1 V" i_bge $end
$var wire 1 W" i_bgeu $end
$var wire 1 X" i_blt $end
$var wire 1 Y" i_bltu $end
$var wire 1 Z" i_bne $end
$var wire 1 [" i_jal $end
$var wire 1 \" i_jalr $end
$var wire 1 ]" i_lb $end
$var wire 1 ^" i_lbu $end
$var wire 1 _" i_lh $end
$var wire 1 `" i_lhu $end
$var wire 1 a" i_lui $end
$var wire 1 b" i_lw $end
$var wire 1 c" i_or $end
$var wire 1 d" i_ori $end
$var wire 1 e" i_sb $end
$var wire 1 f" i_sh $end
$var wire 1 g" i_sll $end
$var wire 1 h" i_slli $end
$var wire 1 i" i_slt $end
$var wire 1 j" i_slti $end
$var wire 1 k" i_sltiu $end
$var wire 1 l" i_sltu $end
$var wire 1 m" i_sra $end
$var wire 1 n" i_srai $end
$var wire 1 o" i_srl $end
$var wire 1 p" i_srli $end
$var wire 1 q" i_sub $end
$var wire 1 r" i_sw $end
$var wire 1 s" i_xor $end
$var wire 1 t" i_xori $end
$var wire 1 u" itype_l $end
$var wire 1 v" itype_r $end
$var wire 1 w" rtype $end
$var wire 1 x" sbtype $end
$var wire 1 y" stype $end
$var wire 2 z" WDSel [1:0] $end
$var wire 3 {" NPCOp [2:0] $end
$var wire 6 |" EXTOp [5:0] $end
$var wire 3 }" DMType [2:0] $end
$var wire 5 ~" ALUOp [4:0] $end
$upscope $end
$scope module U_forwarding $end
$var wire 1 ~ RegWrite_EX $end
$var wire 1 o RegWrite_MEM $end
$var wire 1 ." RegWrite_WB $end
$var wire 5 !# rd_EX [4:0] $end
$var wire 5 "# rd_MEM [4:0] $end
$var wire 5 ## rd_WB [4:0] $end
$var wire 5 $# rs1_EX [4:0] $end
$var wire 5 %# rs1_ID [4:0] $end
$var wire 5 &# rs2_EX [4:0] $end
$var wire 5 '# rs2_ID [4:0] $end
$var wire 5 (# rs2_MEM [4:0] $end
$var reg 2 )# forwardA [1:0] $end
$var reg 2 *# forwardA_branch [1:0] $end
$var reg 2 +# forwardB [1:0] $end
$var reg 2 ,# forwardB_branch [1:0] $end
$var reg 1 K forwardMEM $end
$upscope $end
$scope module U_hazard_detection $end
$var wire 1 8 BranchTaken $end
$var wire 1 ^ IsBranch_ID $end
$var wire 1 ] IsJALR_ID $end
$var wire 1 -# MemRead_EX $end
$var wire 1 .# MemRead_MEM $end
$var wire 1 \ MemWrite_ID $end
$var wire 1 ~ RegWrite_EX $end
$var wire 1 o RegWrite_MEM $end
$var wire 1 /# branch_arith_hazard $end
$var wire 1 0# branch_load_hazard $end
$var wire 1 1# branch_load_hazard_EX $end
$var wire 1 2# branch_load_hazard_MEM $end
$var wire 1 3# jalr_arith_hazard $end
$var wire 1 4# jalr_load_hazard $end
$var wire 1 5# jalr_load_hazard_EX $end
$var wire 1 6# jalr_load_hazard_MEM $end
$var wire 1 7# load_use_hazard $end
$var wire 5 8# rd_EX [4:0] $end
$var wire 5 9# rd_MEM [4:0] $end
$var wire 5 :# rs1_ID [4:0] $end
$var wire 5 ;# rs2_ID [4:0] $end
$var wire 1 <# rs2_can_forward $end
$var wire 1 =# rs2_hazard $end
$var wire 1 ># rs1_hazard $end
$var reg 1 Q flush_IDEX $end
$var reg 1 P flush_IFID $end
$var reg 1 A stall $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
x>#
x=#
x<#
bx ;#
bx :#
bx 9#
bx 8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
0O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
b100000 F"
bx E"
bx D"
bx C"
xB"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
x6"
bx 5"
bx 4"
bx 3"
bx 2"
x1"
bx 0"
bx /"
x."
bx -"
bx ,"
bx +"
x*"
bx )"
bx ("
bx '"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
x~
bx }
bx |
bx {
bx z
bx y
xx
bx w
xv
bx u
xt
bx s
bx r
xq
bx p
xo
bx n
bx m
xl
bx k
bx j
bx i
bx h
bx g
bx f
xe
bx d
bx c
bx b
bx a
bx `
bx _
x^
x]
x\
bx [
bx Z
bx Y
bx X
bx W
xV
bx U
xT
bx S
bx R
xQ
xP
bx O
bx N
bx M
bx L
xK
bx J
bx I
bx H
bx G
bx F
b0 E
bx D
bx C
bx B
xA
bx @
b0 ?
x>
x=
bx <
x;
bx :
bx 9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
x.
bx -
bx ,
bx +
bx *
b0xxx )
bx (
b0 '
1&
b0 %
0$
b0 #
0"
b0 !
$end
#5000
b0 R
b0 H
b0 >"
0P"
1e
1V
1Q"
0]"
0e"
0U"
b100 [
0q"
08
1v"
0;
0w"
0u"
0\
0y"
0^
0x"
b0 U
b0 z"
0=
b11 g
b11 ~"
0]
0\"
b0 Z
b0 {"
0["
0T"
0a"
0s"
b0 b
b0 }"
0^"
0t"
b10000 _
b10000 ="
b10000 |"
0X"
16"
0c"
0i"
0b"
0d"
0j"
0r"
0Y"
b0 4"
b0 5"
0R"
0g"
0l"
0o"
0m"
0_"
0`"
0S"
0k"
0h"
0p"
0n"
0f"
0Z"
0V"
0W"
0Q
0P
0A
0>
00#
04#
b0 X
b0 E"
0<#
b0 W
b0 D"
07#
01#
0/#
05#
03#
02#
06#
b100000000001010010011 (
b100000000001010010011 7
b100000000001010010011 <
b0 6
1>#
b0 D
b0 ?"
b0 %#
b0 :#
1=#
b0 C
b0 @"
b0 '#
b0 ;#
b0 F
b10011 N"
b0 M"
b0 L"
b0 I
b0 9"
b0 J
b0 8"
b0 B
b0 ;"
b0 S
b0 7"
b0 @
b0 <"
b0 G
b0 :"
b0 d
b0 I"
1T
b0 f
b0 K"
0.
b0 /
b0 +
b0 2
b0 `
b0 i
b0 h
b0 G"
b0 3
b0 1
0B"
0K
b0 L
b0 ,#
b0 N
b0 *#
b0 M
b0 +#
b0 O
b0 )#
b0 3"
b0 C"
b100 Y
b0 -
b0 :
b0 2"
0*"
b10011 )"
b100 ("
b0 '"
0&"
0v
0x
0~
0-#
b0 !"
b0 w
b0 y
b0 u
b0 H"
b0 #"
b0 !#
b0 8#
b0 %"
b0 &#
b0 $"
b0 $#
b0 ""
b0 }
b0 |
b100 {
b0 z
b0 J"
0t
0q
0l
0o
0.#
b0 p
b0 )
b0 a
b0 k
b0 s
b0 (#
b0 r
b0 "#
b0 9#
b0 n
b0 ,
b0 4
b0 c
b0 j
b100 m
01"
0."
b0 /"
b0 0"
b0 A"
b0 ##
b0 ,"
b0 +"
b100 -"
b100000 F"
1"
#10000
0"
#15000
b100000 F"
1"
#20000
0&
0"
1$
#25000
b1 R
b1 H
b1 >"
b1000 [
b100000000001100010011 (
b100000000001100010011 7
b100000000001100010011 <
b1 6
0=#
b1 C
b1 @"
b1 '#
b1 ;#
b101 F
b1 I
b1 9"
b1 J
b1 8"
b101 B
b101 ;"
b10000000010 S
b10000000010 7"
b100000000 @
b100000000 <"
b10000000000 G
b10000000000 :"
b1000 Y
b100 -
b100 :
b100 2"
1*"
b100000000001010010011 )"
1v
1~
b11 u
b11 H"
1q
bx ,"
1"
#30000
0"
#35000
0T
b1 f
b1 K"
b1 d
b1 I"
b110 F
b110 B
b110 ;"
b11 S
b11 7"
b101 R
b1100 [
b1110010011 (
b1110010011 7
b1110010011 <
b10 6
1o
1&"
0>#
b101 #"
b101 !#
b101 8#
b1 %"
b1 &#
b1 ""
b100000000001100010011 )"
b1000 ("
b100 '"
b1100 Y
b1000 -
b1000 :
b1000 2"
1"
#40000
0"
#45000
b0 H
b0 >"
b10000 [
b10000010011 (
b10000010011 7
b10000010011 <
b11 6
b0 C
b0 @"
b0 '#
b0 ;#
b111 F
b0 I
b0 9"
b0 J
b0 8"
b111 B
b111 ;"
b10000000011 S
b10000000011 7"
b0 @
b0 <"
b0 G
b0 :"
b1000 R
b1 3
b10000 Y
b1100 -
b1100 :
b1100 2"
b1110010011 )"
b1100 ("
b1000 '"
b110 #"
b110 !#
b110 8#
b1000 {
b100 z
b100 J"
1t
0q
b1 s
b1 (#
b101 r
b101 "#
b101 9#
b1 ,
b1 4
b1 c
b1 j
1."
1"
#50000
0"
#55000
1T
b0 f
b0 K"
1B"
b1 3"
b1 C"
b0 d
b0 I"
b1000 F
b1000 B
b1000 ;"
b100 S
b100 7"
b1100 R
b10100 [
b10011 (
b10011 7
b10011 <
b100 6
11"
b101 0"
b101 A"
b101 ##
b1 +"
b110 r
b110 "#
b110 9#
b1000 m
b111 #"
b111 !#
b111 8#
b0 %"
b0 &#
b0 ""
b1100 {
b1000 z
b1000 J"
b10000010011 )"
b10000 ("
b1100 '"
b10100 Y
b10000 -
b10000 :
b10000 2"
1"
#60000
0"
#65000
b11000 [
b101 6
b0 F
b0 B
b0 ;"
b0 S
b0 7"
b10000 R
b0 3
b11000 Y
b10100 -
b10100 :
b10100 2"
b10011 )"
b10100 ("
b10000 '"
b1000 #"
b1000 !#
b1000 8#
b10000 {
b1100 z
b1100 J"
1q
b0 s
b0 (#
b111 r
b111 "#
b111 9#
b0 ,
b0 4
b0 c
b0 j
b1100 m
b110 0"
b110 A"
b110 ##
b1000 -"
1"
#70000
0"
#75000
b0 3"
b0 C"
b10100 R
b11100 [
b11000101000100001100011 (
b11000101000100001100011 7
b11000101000100001100011 <
b110 6
b111 0"
b111 A"
b111 ##
b0 +"
b1100 -"
b1000 r
b1000 "#
b1000 9#
b10000 m
1>#
1=#
b0 #"
b0 !#
b0 8#
b10100 {
b10000 z
b10000 J"
b11000 ("
b10100 '"
b11100 Y
b11000 -
b11000 :
b11000 2"
1"
#80000
0"
#85000
b10000 H
b10000 >"
b100 g
b100 ~"
0e
0V
b0 b
b0 }"
0]"
0e"
1U"
1P
0Q"
18
1;
b0 U
b0 z"
0u"
0\
0y"
b100 _
b100 ="
b100 |"
1^
b1 Z
b1 {"
1x"
0v"
b1 4"
b1 5"
b1 X
b1 E"
b1 W
b1 D"
b101000 [
b101000000010000010011 (
b101000000010000010011 7
b101000000010000010011 <
b111 6
0>#
b101 D
b101 ?"
b101 %#
b101 :#
0=#
b110 C
b110 @"
b110 '#
b110 ;#
b10000 F
b1100011 N"
b110 I
b110 9"
b110 J
b110 8"
b10000 B
b10000 ;"
b1000 S
b1000 7"
b11000101000 @
b11000101000 <"
b10100000000000011 G
b10100000000000011 :"
b101000 R
b100000 Y
b11100 -
b11100 :
b11100 2"
b11000101000100001100011 )"
b11100 ("
b11000 '"
b11000 {
b10100 z
b10100 J"
b0 r
b0 "#
b0 9#
b10100 m
b1000 0"
b1000 A"
b1000 ##
b10000 -"
1"
#90000
0"
#95000
b0 H
b0 >"
b11 g
b11 ~"
1e
1V
1Q"
0U"
08
1v"
0P
0;
b10000 _
b10000 ="
b10000 |"
0^
b0 Z
b0 {"
0x"
b0 4"
b0 5"
b0 X
b0 E"
b0 W
b0 D"
b101100 [
b1 d
b1 I"
b1 i
b1 h
b1 G"
b0 D
b0 ?"
b0 %#
b0 :#
b0 C
b0 @"
b0 '#
b0 ;#
b0 F
b10011 N"
b0 I
b0 9"
b0 J
b0 8"
b0 B
b0 ;"
b0 S
b0 7"
b0 @
b0 <"
b0 G
b0 :"
b0 R
b100111000001110010011 (
b100111000001110010011 7
b100111000001110010011 <
b1010 6
b0 0"
b0 A"
b0 ##
b10100 -"
b11000 m
0v
0~
b1 y
b100 u
b100 H"
b10000 #"
b10000 !#
b10000 8#
b110 %"
b110 &#
b101 $"
b101 $#
b10000 ""
b1 }
b1 |
b11100 {
b11000 z
b11000 J"
0*"
b10011 )"
b100 ("
b0 '"
b101100 Y
b101000 -
b101000 :
b101000 2"
1"
#100000
0"
#105000
b1 H
b1 >"
b110000 [
b110000000000000001101111 (
b110000000000000001101111 7
b110000000000000001101111 <
b1011 6
b111 D
b111 ?"
b111 %#
b111 :#
b1 C
b1 @"
b1 '#
b1 ;#
b111 F
b1 I
b1 9"
b1 J
b1 8"
b111 B
b111 ;"
b10000000011 S
b10000000011 7"
b100111000 @
b100111000 <"
b11100010000000000 G
b11100010000000000 :"
b101001 R
b0 d
b0 I"
b0 i
b0 h
b0 G"
1T
b0 f
b0 K"
b1 +
b1 2
b1 `
b110000 Y
b101100 -
b101100 :
b101100 2"
1*"
b100111000001110010011 )"
b101100 ("
b101000 '"
0&"
1v
1~
b0 y
b11 u
b11 H"
0>#
0=#
b0 #"
b0 !#
b0 8#
b0 %"
b0 &#
b0 $"
b0 $#
b0 ""
b0 }
b0 |
b100 {
b0 z
b0 J"
0o
b110 s
b110 (#
b10000 r
b10000 "#
b10000 9#
b1 n
b11100 m
b11000 -"
1"
#110000
0"
#115000
b1100 H
b1100 >"
b11 g
b11 ~"
1P
18
0Q"
b10 U
b10 z"
1=
b10 Z
b10 {"
1["
0v"
b1 _
b1 ="
b1 |"
0T"
0T
b1 f
b1 K"
0B"
b0 +
b0 2
b0 `
b1 d
b1 I"
b0 D
b0 ?"
b0 %#
b0 :#
b1100 C
b1100 @"
b1100 '#
b1100 ;#
b0 F
b1101111 N"
b1100 I
b1100 9"
b1100 J
b1100 8"
b0 B
b0 ;"
b0 S
b0 7"
b110000000000 @
b110000000000 <"
b110 G
b110 :"
b111000 R
b111000 [
b101000000010000010011 (
b101000000010000010011 7
b101000000010000010011 <
b1100 6
0."
b10000 0"
b10000 A"
b10000 ##
b11100 -"
0t
1o
b0 s
b0 (#
b0 r
b0 "#
b0 9#
b0 n
b100 m
1&"
0>#
b111 #"
b111 !#
b111 8#
b1 %"
b1 &#
b111 $"
b111 $#
b1 ""
b101100 {
b101000 z
b101000 J"
b110000000000000001101111 )"
b110000 ("
b101100 '"
b110100 Y
b110000 -
b110000 :
b110000 2"
1"
#120000
0"
#125000
b0 H
b0 >"
b11 g
b11 ~"
1Q"
0U"
1v"
1e
0P
0;
1V
08
0^
0x"
b0 U
b0 z"
0=
b10000 _
b10000 ="
b10000 |"
b0 Z
b0 {"
0["
b111100 [
b1100 f
b1100 K"
b100111000001110010011 (
b100111000001110010011 7
b100111000001110010011 <
b1110 6
1=#
b0 C
b0 @"
b0 '#
b0 ;#
b10011 N"
b0 I
b0 9"
b0 J
b0 8"
b0 @
b0 <"
b0 G
b0 :"
b0 R
b1100 d
b1100 I"
b1 3
b111100 Y
b111000 -
b111000 :
b111000 2"
0*"
b10011 )"
b100 ("
b0 '"
b10 !"
b10 y
1>#
b0 #"
b0 !#
b0 8#
b1100 %"
b1100 &#
b0 $"
b0 $#
b1100 ""
b110000 {
b101100 z
b101100 J"
1t
0q
b1 s
b1 (#
b111 r
b111 "#
b111 9#
b1 ,
b1 4
b1 c
b1 j
b101100 m
01"
1."
b0 0"
b0 A"
b0 ##
b100 -"
1"
#130000
0"
#135000
b1 H
b1 >"
06"
b1 4"
1T
b0 f
b0 K"
1B"
b1 3"
b1 C"
b0 3
b11 1
b1 N
b1 *#
b0 d
b0 I"
0>#
b111 D
b111 ?"
b111 %#
b111 :#
0=#
b1 C
b1 @"
b1 '#
b1 ;#
b111 F
b1 I
b1 9"
b1 J
b1 8"
b111 B
b111 ;"
b10000000011 S
b10000000011 7"
b100111000 @
b100111000 <"
b11100010000000000 G
b11100010000000000 :"
b111001 R
b1000000 [
bx (
bx 7
bx <
b1111 6
11"
b111 0"
b111 A"
b111 ##
b1 +"
b101100 -"
b10 p
b1100 s
b1100 (#
b0 r
b0 "#
b0 9#
b1100 ,
b1100 4
b1100 c
b1100 j
b110000 m
0&"
b0 !"
b0 y
b0 %"
b0 &#
b0 ""
b100 {
b0 z
b0 J"
1*"
b100111000001110010011 )"
b111100 ("
b111000 '"
b1000000 Y
b111100 -
b111100 :
b111100 2"
1"
#140000
0"
#145000
b0 H
b0 >"
xP"
xq"
xc"
xR"
xg"
xi"
xl"
xs"
xo"
xm"
x3#
x/#
x]"
x_"
xb"
bx b
bx }"
x^"
x`"
xr"
xe"
xf"
xU"
xZ"
xX"
xV"
xY"
xW"
x8
xn"
x<#
x=
xe
xw"
bx U
bx z"
xu"
xV
x]
x\"
x\
xy"
x^
xx"
bx Z
bx {"
x["
xa"
xT"
xd"
xS"
xt"
bx _
bx ="
bx |"
xp"
xQ"
xj"
xk"
bx g
bx ~"
xv"
xh"
bx 5"
bx W
bx D"
0T
b1 f
b1 K"
bx [
b10000 6
bx D
bx ?"
bx %#
bx :#
x=#
bx C
bx @"
bx '#
bx ;#
bx F
bx N"
bx M"
bx L"
bx I
bx 9"
bx J
bx 8"
bx B
bx ;"
bx S
bx 7"
bx @
bx <"
bx G
bx :"
bx R
b1 d
b1 I"
bx 4"
b0 1
b0 N
b0 *#
b110000 3"
b110000 C"
bx X
bx E"
b1000100 Y
b1000000 -
b1000000 :
b1000000 2"
bx )"
b1000000 ("
b111100 '"
1&"
x>#
b111 #"
b111 !#
b111 8#
b1 %"
b1 &#
b111 $"
b111 $#
b1 ""
b111100 {
b111000 z
b111000 J"
0t
1q
b0 p
b0 s
b0 (#
b0 ,
b0 4
b0 c
b0 j
b100 m
b10 /"
b0 0"
b0 A"
b0 ##
b1100 +"
b110000 -"
1"
#150000
0"
#155000
x0#
x4#
x1#
x5#
x7#
0B"
b0 3"
b0 C"
b1 3
bx d
bx I"
bx i
bx h
bx G"
bx 6
01"
b0 /"
b0 +"
b100 -"
1t
0q
b1 s
b1 (#
b111 r
b111 "#
b111 9#
b1 ,
b1 4
b1 c
b1 j
b111100 m
xv
xx
x~
x-#
bx !"
bx w
bx y
bx u
bx H"
bx #"
bx !#
bx 8#
bx %"
bx &#
bx $"
bx $#
b0 ""
bx }
bx |
b1000000 {
b111100 z
b111100 J"
b1000100 ("
b1000000 '"
bx Y
bx -
bx :
bx 2"
1"
#160000
0"
#165000
x2#
x6#
x.
bx /
bx +
bx 2
bx `
1B"
b1 3"
b1 C"
bx ("
bx '"
b1000100 {
b1000000 z
b1000000 J"
xl
xo
x.#
bx p
b0xxx )
bx a
bx k
bx s
bx (#
bx r
bx "#
bx 9#
bx n
b1000000 m
11"
b111 0"
b111 A"
b111 ##
b1 +"
b111100 -"
1"
#170000
0"
#175000
xB"
x."
bx /"
bx 0"
bx A"
bx ##
b1000000 -"
b1000100 m
bx {
bx z
bx J"
1"
#180000
0"
#185000
bx m
b1000100 -"
1"
#190000
0"
#195000
bx -"
1"
#200000
0"
#205000
1"
#210000
0"
#215000
1"
#220000
0"
b1 #
b1 %
b1 ?
#225000
1"
#230000
0"
b10 #
b10 %
b10 ?
#235000
1"
#240000
0"
b11 #
b11 %
b11 ?
#245000
1"
#250000
0"
b100 #
b100 %
b100 ?
#255000
1"
#260000
0"
b1000 #
b1000 %
b1000 ?
#265000
1"
#270000
0"
b1001 #
b1001 %
b1001 ?
#275000
1"
#280000
0"
#285000
1"
#290000
0"
#295000
1"
#300000
0"
#305000
1"
#310000
0"
#315000
1"
#320000
0"
#325000
1"
#330000
0"
#335000
1"
#340000
0"
#345000
1"
#350000
0"
#355000
1"
#360000
0"
#365000
1"
#370000
0"
#375000
1"
#380000
0"
#385000
1"
#390000
0"
#395000
1"
#400000
0"
#405000
1"
#410000
0"
#415000
1"
#420000
0"
#425000
1"
#430000
0"
#435000
1"
#440000
0"
#445000
1"
#450000
0"
#455000
1"
#460000
0"
#465000
1"
#470000
0"
#475000
1"
#480000
0"
#485000
1"
#490000
0"
#495000
1"
#500000
0"
#505000
1"
#510000
0"
#515000
1"
#520000
0"
#525000
1"
#530000
0"
#535000
1"
#540000
0"
#545000
1"
#550000
0"
#555000
1"
#560000
0"
#565000
1"
#570000
0"
#575000
1"
#580000
0"
b0 #
b0 %
b0 ?
#582000
b1 #
b1 %
b1 ?
#584000
b10 #
b10 %
b10 ?
#585000
1"
#586000
b11 #
b11 %
b11 ?
#588000
b100 #
b100 %
b100 ?
#590000
b1 !
b1 '
b1 E
b101 #
b101 %
b101 ?
0"
#592000
b110 #
b110 %
b110 ?
#594000
b111 #
b111 %
b111 ?
#595000
1"
#596000
b0 !
b0 '
b0 E
b1000 #
b1000 %
b1000 ?
#598000
b1001 #
b1001 %
b1001 ?
#600000
b1010 #
b1010 %
b1010 ?
0"
#602000
b1011 #
b1011 %
b1011 ?
#604000
b1100 #
b1100 %
b1100 ?
#605000
1"
#606000
b1101 #
b1101 %
b1101 ?
#608000
b1110 #
b1110 %
b1110 ?
#610000
b1111 #
b1111 %
b1111 ?
0"
#612000
b10000 #
b10000 %
b10000 ?
